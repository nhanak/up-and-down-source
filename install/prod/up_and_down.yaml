kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: gameservers-manager
rules:
- apiGroups: ["allocation.agones.dev"] # "" indicates the core API group
  resources: ["gameserverallocations"]
  verbs: ["get", "watch", "list", "create", "delete"]
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: websocket-backendconfig
spec:
  timeoutSec: 600
  connectionDraining:
    drainingTimeoutSec: 600
---
apiVersion: v1
kind: Pod
metadata:
  name: matchfunction
  namespace: open-match
  labels:
    app: open-match
    component: matchfunction
spec:
  containers:
  - name: matchfunction
    image: gcr.io/[YOUR_REGISTRY_URL]/matchfunction:latest
    ports:
    - name: grpc
      containerPort: 50502
---
kind: Service
apiVersion: v1
metadata:
  name: matchfunction-service
  namespace: open-match
  labels:
    app: open-match
    component: matchfunction
spec:
  selector:
    app: open-match
    component: matchfunction
  clusterIP: None
  type: ClusterIP
  ports:
  - name: grpc
    protocol: TCP
    port: 50502
---
apiVersion: v1
kind: Pod
metadata:
  name: director
spec:
  containers:
  - name: director
    image: gcr.io/[YOUR_REGISTRY_URL]/director:latest
---
apiVersion: v1
kind: Pod
metadata:
  name: client
  labels:
    app: client-app
spec:
  containers:
  - name: client
    image: gcr.io/[YOUR_REGISTRY_URL]/client:latest
---
apiVersion: v1
kind: Service
metadata:
  name: client-service
  annotations:
    cloud.google.com/backend-config: '{"default":"websocket-backendconfig"}'
    cloud.google.com/load-balancer-type: "Internal"
spec:
  type: LoadBalancer
  selector:
    app: client-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: cloud-mysql-service
spec:
  type: ClusterIP
  selector:
    app: cloud-mysql-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 666
---
apiVersion: v1
kind: Pod
metadata:
  name: cloud-mysql
  labels:
    app: cloud-mysql-app
spec:
  serviceAccountName: up-and-down-mysql-ksa-two
  containers:
  - name: cloud-mysql
    image: gcr.io/[YOUR_REGISTRY_URL]/cloud-mysql:latest
    env:
    - name: DB_USER
      valueFrom:
        secretKeyRef:
          name: jimmy-up-and-down-mysql-secret
          key: username
    - name: DB_PASS
      valueFrom:
        secretKeyRef:
          name: jimmy-up-and-down-mysql-secret
          key: password
    - name: DB_NAME
      valueFrom:
        secretKeyRef:
          name: jimmy-up-and-down-mysql-secret
          key: database
  - name: cloud-sql-proxy
    # It is recommended to use the latest version of the Cloud SQL proxy
    # Make sure to update on a regular schedule!
    image: gcr.io/cloudsql-docker/gce-proxy:1.17
    command:
      - "/cloud_sql_proxy"

      # If connecting from a VPC-native GKE cluster, you can use the
      # following flag to have the proxy connect over private IP
      # - "-ip_address_types=PRIVATE"

      # Replace DB_PORT with the port the proxy should listen on
      # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
      - "-instances=[YOUR_REGISTRY_URL]:us-central1:up-and-down-mysql=tcp:3306"
    securityContext:
      # The default Cloud SQL proxy image runs as the
      # "nonroot" user and group (uid: 65532) by default.
      runAsNonRoot: true
